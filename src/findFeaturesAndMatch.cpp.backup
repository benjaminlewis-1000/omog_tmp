// Find homography using OpenCV packages
#include <opencv2/opencv.hpp>
#include <opencv2/nonfree/nonfree.hpp>
#include <Eigen/Dense>

#include <vector>

#include "ros/ros.h"
#include <cv_bridge/cv_bridge.h>
#include <image_transport/image_transport.h>
#include <homography_calc/matchedPoints.h>
#include <homography_calc/features.h>
#include <std_msgs/Bool.h>
#include "../include/database.h"
#include <std_msgs/Bool.h>

#define SURF 1

#define IN true
#define OUT false

class keypointProcessor
{
public:

/******************************************************************
***********  Initialization function for class  *******************
******************************************************************/

	keypointProcessor()	{
		// Set up feature detectors for the keyframe 	
		
		
	//	 For some reason, making a new detector/extractor every time is *MAGNITUDES* faster!
		#if(SURF)
			if (ros::param::has("SURF_hessian") ){
				ros::param::get("SURF_hessian", minHessian);
			}else{
				ROS_WARN("SURF_hessian is not set.");
				minHessian = 50;
			}
		#endif
			
		std::string startTopic;
		if (ros::param::has("startTopic") ){
			ros::param::get("startTopic", startTopic);
		}else{
			ROS_ERROR("No start topic defined");
			exit(1);
		}
		
		std::string findMatchDB;
		if (ros::param::has("findMatchDB") ){
			ros::param::get("findMatchDB", findMatchDB);
		}else{
			ROS_WARN("findMatchDB is not set.");
			findMatchDB = "FIND_MATCH_KEYFRAMES";
		}
		
		db = new keyframeDatabase(findMatchDB);
		
		keyframeNum = 0;
		
		navigationDirection = OUT;
	
		count = 0;
		//Topic you want to publish
	//	rawFeaturesPub = n.advertise<homography_calc::features>("keypoints", 1);

		//Topic you want to subscribe to
		
		std::string subscriptionTopic;
		if (ros::param::has("videoFeed") ){
			ros::param::get("videoFeed", subscriptionTopic);
		}else{
			subscriptionTopic = "recorded";
		}
		
		std::string resetTopic;
		if (ros::param::has("resetTopic") ){
			ros::param::get("resetTopic", resetTopic);
		}else{
			resetTopic = "keyframeReset";
		}
		
		std::string matchedPointsTopic;
		if (ros::param::has("matchedPointsTopic") ){
			ros::param::get("matchedPointsTopic", matchedPointsTopic);
		}else{
			matchedPointsTopic = "matchedPoints";
		}
				
		if (ros::param::has("imgSaveDir") ){
			ros::param::get("imgSaveDir", imgSaveDir);
		}else{
			ROS_ERROR("imgSaveDir is not set.");
			exit(1);
		}
		
		std::string directionChangeTopic;
		if (ros::param::has("directionChangeTopic") ){
			ros::param::get("directionChangeTopic", directionChangeTopic);
		}else{
			directionChangeTopic = "navChange";
		}
		
		directionSub = n.subscribe(directionChangeTopic, 1, &keypointProcessor::switchNavDirection, this);
			
		imageSub = n.subscribe(subscriptionTopic, 1, &keypointProcessor::keypointFind, this);
		
		keyframeResetSub = n.subscribe(resetTopic, 1, &keypointProcessor::resetKeyframe, this);
		
		startSub = n.subscribe(startTopic, 1, &keypointProcessor::start, this);
	//	rawFeaturesInternalSub = n.subscribe("keypoints", 5, &keypointProcessor::matchKeypoints, this);
		
		// Final
		featuresPub = n.advertise<homography_calc::matchedPoints>(matchedPointsTopic, 1);
		
		startFlag = false;
	}
	
	void resetKeyframe(const std_msgs::Bool msg){
		if (msg.data == true){
			ROS_INFO("Keyframe Reset");
			
			if (navigationDirection == OUT){
			
				#if(SURF)
					cv::FastFeatureDetector detector( minHessian ); 
					 // Sift seems much less crowded than Surf.
					cv::SurfDescriptorExtractor extractor;  
				#endif
				
				imageAccessMutex.lock();
					keyframe = image; // Should be pulling in the latest received keyframe. 
				imageAccessMutex.unlock();
				
				raw_kps_keyframe.erase(raw_kps_keyframe.begin(), raw_kps_keyframe.end() ); //
				detector.detect(keyframe, raw_kps_keyframe);  //  
				extractor.compute(keyframe, raw_kps_keyframe, descriptors_keyframe);  //
			
				// If going out... 
				char buf[30];  
		 		keyframeStack.push_back(keyframeNum);
		 		/*sprintf(buf, "%s/findMatchImages/IM%05d.jpg", imgSaveDir.c_str(), keyframeNum++);
		 		std::string fileLocation = buf;
		 		imwrite(fileLocation, image);
		 		db->addKeyframe(raw_kps_keyframe, fileLocation, descriptors_keyframe);
			*/
				exit; // If we have a keyframe, we know the homography is identity (should be)
			}
			
			
		}
	}
	
	void start(const std_msgs::Bool msg){
		if (msg.data == true){
			ROS_INFO("Starting findAndMatch.");
			startFlag = true;
		}
	}
	
	void switchNavDirection(const std_msgs::Bool msg){
		if (msg.data == true){
			navigationDirection = !navigationDirection;
			ROS_INFO("Switched navigation direction in matchRawFeatures");
		}
	}
	
/******************************************************************
*************  Keypoint Calculation Callback  *********************
******************************************************************/

	void keypointFind(const sensor_msgs::Image::ConstPtr& msg)
	{
	ROS_INFO("Called kp find");
		if (startFlag){
		
			cv_bridge::CvImagePtr cv_ptr;
			cv_ptr = cv_bridge::toCvCopy(msg, "bgr8");
			// Write the image to the class global Mat 'image'. This is so it can 
			// be accessed from other methods. 
		
			imageAccessMutex.lock(); // Don't want the image changing halfway through. 
				image = cv::Mat(cv_ptr->image);
			imageAccessMutex.unlock();
		
			#if(SURF)
				cv::FastFeatureDetector detector( minHessian ); 
				 // Sift seems much less crowded than Surf.
				cv::SurfDescriptorExtractor extractor;  
			#endif
		
	// If the keyframe is empty, define it, empty the keyframe points buffer, and detect the key points. 
	// Should only run once. 
			if (keyframe.rows == 0 && keyframe.cols == 0){
			
				ROS_INFO("Getting the first keyframe");
				
				keyframe = image;
				raw_kps_keyframe.erase(raw_kps_keyframe.begin(), raw_kps_keyframe.end() ); //
				detector.detect(keyframe, raw_kps_keyframe);  //  
				extractor.compute(keyframe, raw_kps_keyframe, descriptors_keyframe);  //
				startFlag = false;
		
				// If going out... 
				char buf[30];  
		 		keyframeStack.push_back(keyframeNum);
		 		sprintf(buf, "%s/findMatchImages/IM%05d.jpg", imgSaveDir.c_str(), keyframeNum++);
		 		std::string fileLocation = buf;
		 		imwrite(fileLocation, image);
		// 		db->addKeyframe(raw_kps_keyframe, fileLocation, descriptors_keyframe);
		
				return; // If we have a keyframe, we know the homography is identity (should be)
				
			}
			ROS_INFO("Here");
			
		
	// If we don't have a brand new keyframe, compute the keypoints on the moving image,
		// then extract the feature descriptors to use in the matcher. 
			std::vector<cv::KeyPoint> raw_kps_moving;
			// Optional rotation
			double rotation_angle;
			keypointProcessor::findParamDouble(&rotation_angle, "image_rotation_angle", 0.0);
		
			keypointProcessor::rotate(image, rotation_angle);
			detector.detect(image, raw_kps_moving);
			cv::Mat descriptors_moving;
			extractor.compute(image, raw_kps_moving, descriptors_moving);	
	
			/********************************************
			Match the keypoints between the two images so a homography can be made. 
			********************************************/
			cv::BFMatcher matcher;
			std::vector< std::vector< cv::DMatch > > doubleMatches;
			std::vector< cv::DMatch > matches;
		
			/** Option 1: Straight feature matcher. ***/ 
			//matcher.match( descriptors_moving, descriptors_keyframe, matches ); 

			/** Option 2: knn matcher, which matches the best two points and then
			 finds the best of the two. It may be overkill.    **/
			 
			matcher.knnMatch( descriptors_moving, descriptors_keyframe, doubleMatches, 2 ); 
		
			// If the matches are within a certain distance (descriptor space),
			// then call them a good match.
	
			double feature_distance;
			keypointProcessor::findParamDouble(&feature_distance, "featureDistance", 2.0);
		
			for (int i = 0; i < doubleMatches.size(); i++) {
				if (doubleMatches[i][0].distance < feature_distance * 
						doubleMatches[i][1].distance){
					matches.push_back(doubleMatches[i][0]);
				}
			}	
		
			/** End of Option 2  **/
		
			double max_dist = 0; double min_dist = 100;

			// Regardless of option picked, calculate max and min distances (descriptor space) between keypoints
			for( int i = 0; i < descriptors_moving.rows; i++ )
			{
				double dist = matches[i].distance;
				if( dist < min_dist ) min_dist = dist;
				if( dist > max_dist ) max_dist = dist;
			}

			// Store only "good" matches (i.e. whose distance is less than minDistMult*min_dist )
			std::vector< cv::DMatch > good_matches;
		
			double minDistMult;
			keypointProcessor::findParamDouble(&minDistMult, "minDistMult", 2.0);
		
			for( int i = 0; i < descriptors_moving.rows; i++ ){ 
				if( matches[i].distance < minDistMult * min_dist ) { 
					good_matches.push_back( matches[i] );
				}
			}
		
			/********************************************
			End of keypoint matching
			********************************************/
	
			/********************************************
			Copy the keypoints from the matches into their own vectors. 
			This is necessary because I don't want to take out any detected
			keypoints from the keyframe match, since I use that repeatedly.
			*********************************************/
			// Vectors that contain the matched keypoints. 
			std::vector<cv::Point2d> matched_kps_moved;
			std::vector<cv::Point2d> matched_kps_keyframe;
	
			double max = 0.85;  
			double min = 0.15;
	
			for( int i = 0; i < good_matches.size(); i++ )
			{
			  matched_kps_moved.push_back( raw_kps_moving[ good_matches[i].queryIdx ].pt );  // Left frame
			  matched_kps_keyframe.push_back( raw_kps_keyframe[ good_matches[i].trainIdx ].pt );
			}		
	
			// OK, so now we have two vectors of matched keypoints. 
			ROS_INFO("Hulk smash!");
			if (! (matched_kps_moved.size() < 4 || matched_kps_keyframe.size() < 4) ){
			ROS_INFO("Not getting here");
				std::vector<uchar> status; 
			
				double fMatP1, fMatP2;
				keypointProcessor::findParamDouble(&fMatP1, "fundMatP1", 2.0);
				keypointProcessor::findParamDouble(&fMatP2, "fundMatP2", 0.99);
			
				findFundamentalMat(matched_kps_moved, matched_kps_keyframe,
					CV_FM_RANSAC, fMatP1, fMatP2, status);
		
				// Erase any points from the matched vectors that don't fit the fundamental matrix
				// with RANSAC.
				for (int i = matched_kps_moved.size() - 1; i >= 0; i--){
					if (status[i] == 0){
						matched_kps_moved.erase(matched_kps_moved.begin() + i);
						matched_kps_keyframe.erase(matched_kps_keyframe.begin() + i);
					}
				}
					
				if (matched_kps_moved.size() >= 4){
				// Despite appearances, this isn't unnecessary. It's possible to remove points 
				// via RANSAC and then not have enough to compute the homography (also >=4 points required)
					homography_calc::matchedPoints kpMsg;
					kpMsg.keyframe_pts.clear();
					for (int i = 0; i < matched_kps_moved.size(); i++){
						geometry_msgs::Point keyframePoint;
						keyframePoint.z = 0;
						keyframePoint.x = matched_kps_keyframe[i].x;
						keyframePoint.y = matched_kps_keyframe[i].y;
						kpMsg.keyframe_pts.push_back(keyframePoint);
				
						geometry_msgs::Point motionPoint;
						motionPoint.z = 0;
						motionPoint.x = matched_kps_moved[i].x;
						motionPoint.y = matched_kps_moved[i].y;
						kpMsg.motion_pts.push_back(motionPoint);
					}
					featuresPub.publish(kpMsg);
				}
			
			}else{
				
				ROS_INFO("Dropping to here");
			}
		}
		
	}

/******************************************************************
**************  Private Functions  ********************************
******************************************************************/
private:
	ros::NodeHandle n; 
	ros::Publisher rawFeaturesPub;
	ros::Publisher featuresPub;
	ros::Subscriber imageSub;
	ros::Subscriber keyframeResetSub;
	ros::Subscriber startSub;
	ros::Subscriber directionSub;
	ros::Subscriber rawFeaturesInternalSub;
	cv::Mat keyframe; 
	std::vector<cv::KeyPoint> raw_kps_keyframe;
	cv::Mat descriptors_keyframe;
	
	cv::Mat image;
	
	
	Mutex imageAccessMutex;
	
	keyframeDatabase* db;
	int keyframeNum;
	std::vector<int> keyframeStack; // Keep a record of the keyframes we push on and take off.
	int navigationDirection;
	
	int count;
	int minHessian;
	bool startFlag;
	std::string imgSaveDir;
	
	void rotate(cv::Mat& src, double angle)
	{
		int len = std::max(src.cols, src.rows);
		cv::Point2f pt(src.cols/2., src.rows/2.);
		cv::Mat r = cv::getRotationMatrix2D(pt, angle, 1.0);

		cv::warpAffine(src, src, r, cv::Size(src.cols, src.rows));
	}
	
	void findParamDouble(double *paramVar, std::string paramName, double defaultVal){
		if (ros::param::has("paramName") ){
			ros::param::get("paramName", *paramVar);
		}else{
			*paramVar = defaultVal;
		}
	}

};//End of class SubscribeAndPublish


int main(int argc, char **argv)
{

  //Initiate ROS
  ros::init(argc, argv, "keypoint_calc");

  //Create an object of class SubscribeAndPublish that will take care of everything
  keypointProcessor SAPObject;

  ros::spin();

  return 0;
}

